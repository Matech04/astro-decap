---
import { getRelativeLocaleUrl } from "astro:i18n";
const { links, Logo, lang, langs } = Astro.props;
const url = Astro.url.pathname;
---

<style>
  .button {
    width: 3rem;
    background-color: transparent;
    color: var(--color-text);
  }

  .logo {
    width: 4rem;
    height: auto;
  }

  .logo svg {
    width: 100%;
    height: 100%;
  }
  nav {
    display: flex;
    flex-direction: column;
    align-items: center;
    font-size: var(--text-md);
    text-transform: uppercase;
    gap: 2.5rem;
    background: transparent;
    position: fixed;
    top: 0;
    width: 100%;
    height: auto;
    touch-action: none;
  }

  .menu {
    pointer-events: all;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2.5rem;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 1) 0%,
      rgba(0, 0, 0, 1) 80%,
      rgba(0, 0, 0, 0) 100%
    );
    padding-top: 3rem;
    padding-bottom: 8rem;
    transform: translateY(-100%);
    transition: transform 0.5s ease-in-out;
  }

  .links {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .languages {
    display: flex;
    flex-direction: row;
    gap: 2rem;
    text-transform: uppercase;
  }

  #openNav {
    pointer-events: all;
    position: absolute;
    top: 2rem;
    right: 2rem;
    transform: translateX(0);
    transition: transform 0.6s ease-in-out;
  }
  .menu.open {
    transform: translateY(0);
  }

  #openNav.open {
    transform: translateX(200%);
  }

  .hidden {
    display: none;
  }
  a {
    position: relative;
  }

  .active {
    pointer-events: none;
  }
  .active::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2.5px;
    background-color: var(--color-accent);
    border-radius: 1rem;
    bottom: -0.4rem;
    left: 0;
  }

  @media (min-width: 768px) {
    nav {
      position: absolute;
    }
    .button {
      display: none;
    }
    .menu {
      transform: translateY(0);
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      padding-bottom: 0;
    }

    .links {
      flex-direction: row;
      gap: clamp(1rem, 2vw, 2rem);
    }

    .languages {
      gap: clamp(1rem, 2vw, 2rem);
    }
  }
</style>

<nav id="nav" role="navigation" class="margin">
  <div id="menu" class="menu hidden">
    <a class="logo" href={links.home.href}><Logo /></a>

    <div class="links">
      {
        Object.entries(links).map(([key, { href, text }]) => (
          <a href={href} class={href === url ? "active" : ""}>
            {text}
          </a>
        ))
      }
    </div>

    <div class="languages">
      {
        langs.map((l) => (
          <a
            id={l}
            href={getRelativeLocaleUrl(l, "/")}
            class={l === lang ? "active" : ""}
          >
            {l}
          </a>
        ))
      }
    </div>

    <button id="closeNav" class="button">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke-width="1.5"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="m4.5 15.75 7.5-7.5 7.5 7.5"></path>
      </svg>
    </button>
  </div>
  <button id="openNav" class="button">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M3.75 6.75h16.5M3.75 12h16.5M12 17.25h8.25"></path>
    </svg>
  </button>
</nav>

<script>
  const nav = document.getElementById("nav");
  const openNav = document.getElementById("openNav");
  const closeNav = document.getElementById("closeNav");
  const menu = document.getElementById("menu");

  let isOpen = false;

  const toggleNav = () => {
    isOpen = !isOpen;

    menu?.classList.toggle("open");
    openNav?.classList.toggle("open");
    nav?.classList.toggle("open");
    menu?.querySelector("a").focus();
  };

  menu?.addEventListener("transitionend", () => {
    if (!isOpen) menu.classList.toggle("hidden");
  });

  openNav.addEventListener("click", () => {
    menu.classList.toggle("hidden");
    setTimeout(toggleNav, 100);
  });
  closeNav.addEventListener("click", toggleNav);

  const handleSwipe = (event) => {
    if (!nav?.contains(event.target)) {
      if (isOpen) toggleNav();
    }
  };

  document.addEventListener("click", handleSwipe);
  document.addEventListener("touchstart", handleSwipe);
</script>
